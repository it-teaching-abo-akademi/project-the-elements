[gd_resource type="VisualShader" load_steps=20 format=2]

[ext_resource path="res://Attack/noisetexture.tres" type="Texture" id=1]
[ext_resource path="res://Attack/katana.png" type="Texture" id=2]

[sub_resource type="VisualShaderNodeScalarUniform" id=1]
uniform_name = "Brightness"

[sub_resource type="VisualShaderNodeScalarOp" id=2]

[sub_resource type="VisualShaderNodeScalarOp" id=3]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=4]
default_input_values = [ 0, 1.0, 1, 0.5 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=5]
function = 15

[sub_resource type="VisualShaderNodeColorConstant" id=6]
constant = Color( 0.994141, 0.827156, 0, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=7]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=8]

[sub_resource type="VisualShaderNodeTextureUniform" id=9]
uniform_name = "WeaponTexture"

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=11]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=12]

[sub_resource type="VisualShaderNodeScalarUniform" id=13]
uniform_name = "dissolve"

[sub_resource type="VisualShaderNodeScalarFunc" id=14]
function = 16

[sub_resource type="VisualShaderNodeTexture" id=15]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeScalarOp" id=16]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "uv"

[resource]
code = "shader_type canvas_item;
uniform float Brightness;
uniform sampler2D WeaponTexture;
uniform sampler2D tex_frg_3;uniform float dissolve;



void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:10
	float n_out10p0;
	n_out10p0 = Brightness;

// Input:9
	vec3 n_out9p0;
	n_out9p0 = vec3(UV,0.0);

// TextureUniform:18
	vec3 n_out18p0;
	float n_out18p1;
	{
		vec4 n_tex_read = texture( WeaponTexture , n_out9p0.xy );
		n_out18p0 = n_tex_read.rgb;
		n_out18p1 = n_tex_read.a;
	}

// ScalarOp:11
	float n_out11p0;
	n_out11p0 = n_out10p0 + dot(n_out18p0,vec3(0.333333,0.333333,0.333333));

// Input:2
	vec3 n_out2p0;
	n_out2p0 = vec3(UV,0.0);

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	vec4 tex_frg_3_read = texture( tex_frg_3 , n_out2p0.xy );
	n_out3p0 = tex_frg_3_read.rgb;
	n_out3p1 = tex_frg_3_read.a;

// ScalarUniform:5
	float n_out5p0;
	n_out5p0 = dissolve;

// ScalarOp:4
	float n_out4p0;
	n_out4p0 = dot(n_out3p0,vec3(0.333333,0.333333,0.333333)) + n_out5p0;

// ScalarOp:12
	float n_in12p1 = 0.50000;
	float n_out12p0;
	n_out12p0 = n_out4p0 + n_in12p1;

// ScalarOp:13
	float n_in13p0 = 1.00000;
	float n_out13p0;
	n_out13p0 = n_in13p0 - n_out12p0;

// ScalarFunc:14
	float n_out14p0;
	n_out14p0 = round(n_out13p0);

// Color:15
	vec3 n_out15p0;
	float n_out15p1;
	n_out15p0 = vec3(0.994141,0.827156,0.000000);
	n_out15p1 = 1.000000;

// VectorOp:16
	vec3 n_out16p0;
	n_out16p0 = vec3(n_out14p0) * n_out15p0;

// VectorOp:17
	vec3 n_out17p0;
	n_out17p0 = vec3(n_out11p0) + n_out16p0;

// ScalarFunc:6
	float n_out6p0;
	n_out6p0 = ceil(n_out4p0);

// ScalarOp:8
	float n_out8p0;
	n_out8p0 = n_out18p1 * n_out6p0;

// Output:0
	COLOR.rgb = n_out17p0;
	COLOR.a = n_out8p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 180, -373.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1740, -120 )
nodes/fragment/2/node = SubResource( 10 )
nodes/fragment/2/position = Vector2( 280, 100 )
nodes/fragment/3/node = SubResource( 11 )
nodes/fragment/3/position = Vector2( 460, 0 )
nodes/fragment/4/node = SubResource( 12 )
nodes/fragment/4/position = Vector2( 650, 43 )
nodes/fragment/5/node = SubResource( 13 )
nodes/fragment/5/position = Vector2( 451, 224 )
nodes/fragment/6/node = SubResource( 14 )
nodes/fragment/6/position = Vector2( 820, 40 )
nodes/fragment/7/node = SubResource( 15 )
nodes/fragment/7/position = Vector2( 888, -203 )
nodes/fragment/8/node = SubResource( 16 )
nodes/fragment/8/position = Vector2( 1168, -45 )
nodes/fragment/9/node = SubResource( 17 )
nodes/fragment/9/position = Vector2( 461, -132 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 920, -300 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 1120, -240 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 820, 120 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 1020, 120 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 1220, 160 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( 1260, 240 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( 1460, 60 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( 1380, -200 )
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( 655.5, -244.5 )
nodes/fragment/connections = PoolIntArray( 5, 0, 4, 1, 3, 0, 4, 0, 4, 0, 6, 0, 2, 0, 3, 0, 6, 0, 8, 1, 10, 0, 11, 0, 12, 0, 13, 1, 4, 0, 12, 0, 13, 0, 14, 0, 14, 0, 16, 0, 15, 0, 16, 1, 11, 0, 17, 0, 16, 0, 17, 1, 17, 0, 0, 0, 8, 0, 0, 1, 18, 0, 11, 1, 18, 1, 8, 0, 9, 0, 18, 0 )
nodes/light/0/position = Vector2( 400, 140 )
